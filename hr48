import java.io.*;
import java.util.*;
class Node
{
    int value;
    Node left,right;
    Node(int value)
    {
        this.value=value;
        this.left=null;
        this.right=null;
    }
    
}
public class Solution 
{
    static Node buildTree(String[]values)
    {
        if(values.length==0||values[0].equals("null"))
        {
            return null;
        }
        Node root=new Node(Integer.parseInt(values[0]));//root node
        Queue<Node> q=new LinkedList<>();
        q.add(root);//add the root node to the queue
        int i=1;
        while(!q.isEmpty()&&i<values.length)
        {
            Node current=q.poll();
            //left child
            if(i<values.length && !values[i].equals("null"))
            {
                current.left=new Node(Integer.parseInt(values[i]));
                q.add(current.left);
            }
            
            i++;
            //right child
            if(i<values.length && !values[i].equals("null"))
            {
                current.right=new Node(Integer.parseInt(values[i]));
                q.add(current.right);
            }
            i++;
        }
        return root;
    }
    static Node findLCA(Node root,int p,int q)
    {
        if(root==null||root.value==p||root.value==q)
        {
            return root;
        }
        Node left=findLCA(root.left,p,q);
        Node right=findLCA(root.right,p,q);
        if(left!=null &&right!=null)
        {
            return root;
        }
        return (left!=null)?left:right;
    }

    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=Integer.parseInt(sc.nextLine());
        String[]values=sc.nextLine().split(" ");
        Node root=buildTree(values);
        String[]pq=sc.nextLine().split(" ");
        int p=Integer.parseInt(pq[0]);
        int q=Integer.parseInt(pq[1]);
        Node LCA=findLCA(root,p,q);
        System.out.println((LCA!=null)?LCA.value:"null");
        
    }
}
