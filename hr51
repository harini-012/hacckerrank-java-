import java.io.*;
import java.util.*;
class Node
{
    int value;
    Node left,right;
    Node(int value)
    {
        this.value=value;
        this.left=null;
        this.right=null;
    }
}
public class Solution 
{
    static Node buildTree(String[]values)
    {
       if(values.length==0||values[0].equals("null"))
       {
           return null;
       }
       Node root=new Node(Integer.parseInt(values[0]));
       Queue<Node> q=new LinkedList<>();
       q.add(root);
       int i=1;
       while(i<values.length&&!q.isEmpty())
       {
           Node current=q.poll();
           if(i<values.length&&!values[i].equals("null"))
           {
               current.left=new Node(Integer.parseInt(values[i]));
               q.add(current.left);
           }
           i++;
           if(i<values.length&&!values[i].equals("null"))
           {
               current.right=new Node(Integer.parseInt(values[i]));
               q.add(current.right);
           }
           i++;

       }
        return root;
    
    }
    static void findLeft(Node root)
    {
        if(root==null)
        {
            return;
        }
        Queue<Node> q=new LinkedList<>();
        q.add(root);
         Node leftmost=null;
        while(!q.isEmpty())
        {
           
            int size=q.size();
           
            for(int i=0;i<size;i++)
            {
                 Node current=q.poll();
                 leftmost=current;
                
                if(current.right!=null)
                {
                    q.add(current.right);
                }
                if(current.left!=null)
                {
                    q.add(current.left);
                }
                
            }
            
             
        }
        System.out.println(leftmost.value);
       
    }
    

    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int no=sc.nextInt();
        sc.nextLine();
        String[]values=sc.nextLine().split(" ");
        Node root=buildTree(values);
        findLeft(root);
        
    }
}
