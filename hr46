import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left,right;
    
    Node(int data)
    {
        this.data=data;
        this.left=null;
        this.right=null;
    }
}

public class Solution {
    
    static Node buildTree(String[] values)
    {
        if(values.length == 0|| values[0].equals("null")){
            return null;
        }
        
        Node root =new Node(Integer.parseInt(values[0]));
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        int i=1;
        while(!q.isEmpty() && i< values.length)
        {
            Node current = q.poll();
        
        
        //left
        if(i<values.length && !values[i].equals("null"))
        {
            current.left=new Node(Integer.parseInt(values[i]));
            q.add(current.left);
        }
        i++;
        
        
        //right
        if(i<values.length && !values[i].equals("null"))
        {
            current.right=new Node(Integer.parseInt(values[i]));
            q.add(current.right);
        }
        i++;
        }
        return root;
    }
    
    //max depth
    
    static int maxdepth(Node root)
    {
        if(root==null)
        {
            return 0;
        }
        return 1+ Math.max(maxdepth(root.left),maxdepth(root.right));
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=Integer.parseInt(sc.nextLine().trim());  //type caste to integer
        String[] values=sc.nextLine().split(" ");
        
        Node root=buildTree(values);
        System.out.println(maxdepth(root));
    }
}
